diff --git a/qt-4.5.2-webkit/WebCore/WebCore.pro b/qt-4.5.2-webkit/WebCore/WebCore.pro
index 8559ebc..235b59e 100644
--- a/qt-4.5.2-webkit/WebCore/WebCore.pro
+++ b/qt-4.5.2-webkit/WebCore/WebCore.pro
@@ -1149,7 +1149,8 @@ SOURCES += \
     ../WebKit/qt/Api/qwebhistoryinterface.cpp \
     ../WebKit/qt/Api/qwebpluginfactory.cpp \
     ../WebKit/qt/Api/qwebsecurityorigin.cpp \
-    ../WebKit/qt/Api/qwebdatabase.cpp
+    ../WebKit/qt/Api/qwebdatabase.cpp \
+    ../WebKit/qt/Api/qwebvdom.cpp
 
 
     win32-*|wince*: SOURCES += platform/win/SystemTimeWin.cpp
diff --git a/qt-4.5.2-webkit/WebCore/loader/TextResourceDecoder.cpp b/qt-4.5.2-webkit/WebCore/loader/TextResourceDecoder.cpp
index f37d8f7..8027a54 100644
--- a/qt-4.5.2-webkit/WebCore/loader/TextResourceDecoder.cpp
+++ b/qt-4.5.2-webkit/WebCore/loader/TextResourceDecoder.cpp
@@ -350,6 +350,12 @@ void TextResourceDecoder::setEncoding(const TextEncoding& encoding, EncodingSour
     else
         m_decoder.reset(encoding);
 
+    // Special rule for GBK/GB2312 stuffs (agentzh)
+    if (strcasecmp(m_decoder.encoding().name(), "gb2312") ||
+            strcasecmp(m_decoder.encoding().name(), "iso-8859-1")) {
+        //m_decoder.reset("gbk");
+    }
+
     m_source = source;
 }
 
diff --git a/qt-4.5.2-webkit/WebKit/qt/Api/headers.pri b/qt-4.5.2-webkit/WebKit/qt/Api/headers.pri
index 2b3c940..4acb139 100644
--- a/qt-4.5.2-webkit/WebKit/qt/Api/headers.pri
+++ b/qt-4.5.2-webkit/WebKit/qt/Api/headers.pri
@@ -5,4 +5,6 @@ WEBKIT_API_HEADERS = $$PWD/qwebframe.h \
                      $$PWD/qwebsettings.h \
                      $$PWD/qwebhistoryinterface.h \
                      $$PWD/qwebdatabase.h \
-                     $$PWD/qwebsecurityorigin.h
+                     $$PWD/qwebsecurityorigin.h \
+                     $$PWD/qwebvdom.h
+
diff --git a/qt-4.5.2-webkit/WebKit/qt/Api/qwebpage.cpp b/qt-4.5.2-webkit/WebKit/qt/Api/qwebpage.cpp
index 01b68eb..976d92e 100644
--- a/qt-4.5.2-webkit/WebKit/qt/Api/qwebpage.cpp
+++ b/qt-4.5.2-webkit/WebKit/qt/Api/qwebpage.cpp
@@ -246,7 +246,9 @@ QWebPagePrivate::QWebPagePrivate(QWebPage *qq)
                     new DragClientQt(q), new InspectorClientQt(q));
 
     // ### should be configurable
-    page->settings()->setDefaultTextEncodingName("iso-8859-1");
+    // hard-coded GBK here by agentzh:
+    //page->settings()->setDefaultTextEncodingName("iso-8859-1");
+    page->settings()->setDefaultTextEncodingName("gbk");
 
     settings = new QWebSettings(page->settings());
 
@@ -951,12 +953,14 @@ bool QWebPagePrivate::handleScrolling(QKeyEvent *ev)
     ScrollGranularity granularity;
 
 #ifndef QT_NO_SHORTCUT
-    if (ev == QKeySequence::MoveToNextPage
-        || (ev->key() == Qt::Key_Space && !(ev->modifiers() & Qt::ShiftModifier))) {
+    if (ev == QKeySequence::MoveToNextPage) {
+        // no shift-space shortcut here... (agentzh)
+        //|| (ev->key() == Qt::Key_Space && !(ev->modifiers() & Qt::ShiftModifier))) {
         granularity = ScrollByPage;
         direction = ScrollDown;
-    } else if (ev == QKeySequence::MoveToPreviousPage
-               || (ev->key() == Qt::Key_Space) && (ev->modifiers() & Qt::ShiftModifier)) {
+    } else if (ev == QKeySequence::MoveToPreviousPage) {
+               // no shift-space shortcut here... (agentzh)
+               //|| (ev->key() == Qt::Key_Space) && (ev->modifiers() & Qt::ShiftModifier)) {
         granularity = ScrollByPage;
         direction = ScrollUp;
     } else
diff --git a/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom.cpp b/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom.cpp
new file mode 100644
index 0000000..c5ec0e3
--- /dev/null
+++ b/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom.cpp
@@ -0,0 +1,523 @@
+/* qvdom.
+ * get vdom string from QWebFrame
+ */
+
+#include "config.h"
+#include "qwebvdom_p.h"
+#include "qwebvdom.h"
+#include "qwebframe.h"
+#include "qwebframe_p.h"
+#include "Frame.h"
+#include "Node.h"
+#include "NodeList.h"
+#include "Element.h"
+#include "Document.h"
+#include "HTMLDocument.h"
+#include "DOMWindow.h"
+#include "HTMLElement.h"
+#include "HTMLLinkElement.h"
+#include "HTMLImageElement.h"
+#include "HTMLFrameOwnerElement.h"
+#include "RenderView.h"
+#include "Location.h"
+#include "wtf/HashMap.h"
+#include "HTMLNames.h"
+#include "RenderText.h"
+#include "RenderTableCell.h"
+#include "HTMLParser.h"
+
+typedef HashMap<String, String> AttrHash;
+typedef HashMap<String, String>::const_iterator  AttrHashIterator;
+
+QWebVDomPrivate::QWebVDomPrivate()
+    :q(0), m_qframe(0) {
+    m_vdom.reserve(300 * 1024); // 300 KB
+}
+
+QWebVDomPrivate::~QWebVDomPrivate() {}
+
+void QWebVDomPrivate::init(QWebVDom* qvdom, QWebFrame* qframe) {
+    q = qvdom;
+    m_qframe = qframe;
+}
+
+void QWebVDomPrivate::setFrame(QWebFrame* qframe) {
+    m_qframe = qframe;
+}
+
+const QByteArray& QWebVDomPrivate::dumpVDom() {
+    m_vdom.clear();
+    if (!m_qframe) {
+        return m_vdom;
+    }
+    Frame* frame = QWebFramePrivate::core(m_qframe);
+    DOMWindow* win = frame->domWindow();
+    //vdom = m_vdom;
+    dumpVWindow(win);
+    return m_vdom;
+}
+
+void QWebVDomPrivate::dumpStrAsJson(const char* str) {
+    const char *json_number_chars = "0123456789.+-eE";
+    const char *json_hex_chars = "0123456789abcdef";
+
+    m_vdom += "\"";
+    int pos = 0, start_offset = 0;
+    unsigned char c;
+    do {
+        c = str[pos];
+        switch(c) {
+        case '\0':
+        break;
+        case '\b':
+        case '\n':
+        case '\r':
+        case '\t':
+        case '"':
+        case '\\':
+        //case '/':
+        if (pos - start_offset > 0) {
+            m_vdom.append(str + start_offset, pos - start_offset);
+        }
+        if (c == '\b')      m_vdom += "\\b";
+        else if (c == '\n') m_vdom += "\\n";
+        else if (c == '\r') m_vdom += "\\r";
+        else if (c == '\t') m_vdom += "\\t";
+        else if (c == '"')  m_vdom += "\\\"";
+        else if (c == '\\') m_vdom += "\\\\";
+        else if (c == '/')  m_vdom += "\\/";
+        start_offset = ++pos;
+        break;
+        default:
+            if (c < ' ') {
+                if (pos - start_offset > 0) {
+                    m_vdom.append(str + start_offset, pos - start_offset);
+                }
+                char buf[8];
+                sprintf(buf, "\\u00%c%c",
+                    json_hex_chars[c >> 4],
+                    json_hex_chars[c & 0xf]);
+                m_vdom += buf;
+                start_offset = ++pos;
+            } else {
+                pos++;
+            }
+        }
+    } while (c);
+    if (pos - start_offset > 0) {
+        m_vdom += str + start_offset, pos - start_offset;
+    }
+    m_vdom += "\"";
+}
+
+void QWebVDomPrivate::dumpStrAsJson(const QString& str) {
+    return dumpStrAsJson(str.toUtf8().data());
+}
+
+void QWebVDomPrivate::dumpStrAsJson(const String& str) {
+    return dumpStrAsJson(QString(str));
+}
+
+void QWebVDomPrivate::dumpVWindow(DOMWindow* win) {
+    Location* loc = win->location();
+
+    m_vdom += "window location=";
+    dumpStrAsJson(loc->href());
+
+    m_vdom += " innerHeight=";
+    m_vdom += QByteArray::number(win->innerHeight());
+
+    m_vdom += " innerWidth=";
+    m_vdom += QByteArray::number(win->innerWidth());
+
+    m_vdom += " outerHeight=";
+    m_vdom += QByteArray::number(win->outerHeight());
+
+    m_vdom += " outerWidth=";
+    m_vdom += QByteArray::number(win->outerWidth());
+
+    m_vdom += " {\n";
+    Document* doc = win->document();
+    if (doc->isHTMLDocument()) {
+        dumpVDocument(static_cast<HTMLDocument*>(doc));
+    }
+    m_vdom += "}\n";
+    //fprintf(stderr, "** m_vdom **\n%s\n=================\n", m_vdom.data());
+}
+
+void QWebVDomPrivate::dumpVDocument(HTMLDocument* doc) {
+    DOMWindow* defaultView = doc->defaultView();
+
+    AttrHash ctx;
+    m_vdom += "document width=";
+    m_vdom += QByteArray::number(doc->width());
+    m_vdom += " height=";
+    m_vdom += QByteArray::number(doc->height());
+    const String& title = doc->title();
+    if (!title.isEmpty()) {
+        m_vdom += " title=";
+        dumpStrAsJson(title);
+    }
+
+    m_vdom += " {\n";
+    dumpVElement(static_cast<HTMLElement*>(doc->body()), defaultView, ctx);
+    m_vdom += "}\n";
+}
+
+void QWebVDomPrivate::dumpVElement(HTMLElement* elem, DOMWindow* defaultView, AttrHash &ctx) {
+    if (!elem) {
+        return;
+    }
+
+    RefPtr<CSSStyleDeclaration> computedStyle = defaultView->getComputedStyle(elem, String());
+
+    if (computedStyle->getPropertyValue("display") == "none") {
+        return;
+    }
+
+    const String& tagName = elem->tagName();
+    m_vdom += QString(tagName).toUtf8();
+
+    dumpVAttrs(elem, computedStyle.release(), ctx);
+
+    m_vdom += " {\n";
+
+    if (tagName == "FRAME" || tagName == "IFRAME") {
+        HTMLFrameOwnerElement* frameElem = static_cast<HTMLFrameOwnerElement*>(elem);
+        if (frameElem && frameElem->contentWindow()) {
+            dumpVWindow(frameElem->contentWindow());
+        }
+    } else {
+        dumpVChildren(elem, defaultView, ctx);
+    }
+
+    m_vdom += "}\n";
+}
+
+void QWebVDomPrivate::dumpVAttrs(HTMLElement* elem, PassRefPtr<CSSStyleDeclaration> passStyle, AttrHash &ctx) {
+    RefPtr<CSSStyleDeclaration> computedStyle = passStyle;
+    if (!elem->id().isNull()) {
+        m_vdom += " id=";
+        dumpStrAsJson(elem->id());
+    }
+
+    if (!elem->className().isNull()) {
+        m_vdom += " className=";
+        dumpStrAsJson(elem->className());
+    }
+
+/*
+    String className = elem->className();
+    if (!ctx.contains("className") || ctx.get("className") != className) {
+        if (!className.isNull()) {
+            ctx.set("className", className);
+            m_vdom += " className=");
+            dumpStrAsJson(className));
+        }
+    }
+*/
+    const String& tagName = elem->tagName();
+    if (tagName == "A") {
+        HTMLLinkElement* linkElem = static_cast<HTMLLinkElement*>(elem);
+        if (!linkElem->href().isNull()) {
+            m_vdom += " href=";
+            //QUrl url(linkElem->href());
+            //fprintf(stderr, "URL: %s\n", url.toEncoded().data());
+            dumpStrAsJson(linkElem->href());
+        }
+        if (!linkElem->getAttribute(HTMLNames::nameAttr).isNull()) {
+            m_vdom += " name=";
+            dumpStrAsJson(linkElem->getAttribute(HTMLNames::nameAttr).string());
+        }
+
+        if (!elem->target().isNull()) {
+            m_vdom += " target=";
+            dumpStrAsJson(elem->target());
+        }
+    } else if (tagName == "IMG") {
+        HTMLImageElement* imageElem = static_cast<HTMLImageElement*>(elem);
+        if (!imageElem->alt().isNull()) {
+            m_vdom += " alt=";
+            dumpStrAsJson(imageElem->alt());
+        }
+        if (!imageElem->name().isNull()) {
+            m_vdom += " name=";
+            dumpStrAsJson(imageElem->name());
+        }
+        if (!imageElem->src().isNull()) {
+            m_vdom += " src=";
+            dumpStrAsJson(imageElem->src());
+        }
+    }
+
+    /*
+    FloatPoint absPos = static_cast<RenderObject*>(elem->renderer())->localToAbsolute();
+    int posX = absPos.x();
+    int posY = absPos.y();
+    */
+
+    int posX = 0;
+    int posY = 0;
+    Element* tmpElem = elem;
+    while (tmpElem) {
+        posX += tmpElem->offsetLeft();
+        posY += tmpElem->offsetTop();
+        tmpElem = tmpElem->offsetParent();
+    }
+
+    String x(QString::number(posX));
+    String y(QString::number(posY));
+
+    //qDebug() << "x:y: " <<  x << " " << y << endl;
+    if (!ctx.contains("x") || ctx.get("x") != x) {
+        ctx.set("x", x);
+        m_vdom += " x=";
+        m_vdom += QString(x).toUtf8();
+    }
+
+    if (!ctx.contains("y") || ctx.get("y") != y) {
+        ctx.set("y", y);
+        m_vdom += " y=";
+        m_vdom += QString(y).toUtf8();
+    }
+
+    String w(QString::number(elem->offsetWidth()));
+    if (!ctx.contains("w") || ctx.get("w") != w) {
+        ctx.set("w", w);
+        m_vdom += " w=";
+        m_vdom += QString(w).toUtf8();
+    }
+
+    String h(QString::number(elem->offsetHeight()));
+    if (!ctx.contains("h") || ctx.get("h") != h) {
+        ctx.set("h", h);
+        m_vdom += " h=";
+        m_vdom += QString(h).toUtf8();
+    }
+
+    String family = computedStyle->getPropertyValue("font-family");
+    if (!ctx.contains("fontFamily") || ctx.get("fontFamily") != family) {
+        ctx.set("fontFamily", family);
+        m_vdom += " fontFamily=";
+        dumpStrAsJson(family);
+    }
+
+    String size = computedStyle->getPropertyValue("font-size");
+    if (!ctx.contains("fontSize") || ctx.get("fontSize") != size) {
+        ctx.set("fontSize", size);
+        m_vdom += " fontSize=";
+        dumpStrAsJson(size);
+    }
+
+    String style = computedStyle->getPropertyValue("font-style");
+    if (!ctx.contains("fontStyle") || ctx.get("fontStyle") != style) {
+        ctx.set("fontStyle", style);
+        m_vdom += " fontStyle=";
+        dumpStrAsJson(style);
+    }
+
+    String weight = computedStyle->getPropertyValue("font-weight");
+    if (!ctx.contains("fontWeight") || ctx.get("fontWeight") != weight) {
+        ctx.set("fontWeight", weight);
+        m_vdom += " fontWeight=";
+        dumpStrAsJson(weight);
+    }
+
+    String color = computedStyle->getPropertyValue("color");
+    if (!ctx.contains("color") || ctx.get("color") != color) {
+        ctx.set("color", color);
+        m_vdom += " color=";
+        dumpStrAsJson(color);
+    }
+
+    String bgcolor = computedStyle->getPropertyValue("background-color");
+    if (!ctx.contains("bgcolor") || ctx.get("bgcolor") != bgcolor) {
+        ctx.set("bgcolor", bgcolor);
+        m_vdom += " backgroundColor=";
+        dumpStrAsJson(bgcolor);
+    }
+}
+
+void QWebVDomPrivate::dumpVChildren(HTMLElement* elem, DOMWindow* defaultView, AttrHash &ctx) {
+    RefPtr<NodeList> children = elem->childNodes();
+    unsigned len = children->length();
+    for (unsigned i = 0; i < len; i++) {
+        Node* child = children->item(i);
+        //Node::NodeType type = child->nodeType();
+        if (child->isElementNode()) {
+            HTMLElement* elem = static_cast<HTMLElement*>(child);
+            String tagName = elem->tagName();
+            if (tagName == "SCRIPT"
+                    || tagName == "STYLE"
+                    || tagName == "NOSCRIPT"
+                    || tagName == "LINK") {
+                continue;
+            }
+/*
+            AttrHashIterator end = ctx.end();
+            for (AttrHashIterator it = ctx.begin(); it != end; ++it) {
+                cloneCtx.add(it->first, it->second);
+            }
+*/
+            AttrHash clonedCtx = ctx;
+            dumpVElement(elem, defaultView, clonedCtx);
+        } else if (child->isTextNode()) {
+            AttrHash clonedCtx = ctx;
+            dumpVTextNode(child, clonedCtx);
+        } else {
+
+        }
+    }
+}
+
+void QWebVDomPrivate::dumpVTextNode(Node* node, AttrHash& ctx) {
+    RenderText* text = static_cast<RenderText*>(node->renderer());
+    if (text) {
+        //IntRect linesBox = text->linesBoundingBox();
+        dumpStrAsJson(node->nodeValue());
+
+        FloatPoint absPos = text->localToAbsolute();
+        int posX = absPos.x();
+        int posY = absPos.y();
+
+        /*
+        int posX = 0;
+        int posY = 0;
+
+        RenderBoxModelObject* tmpElem = text->offsetParent();
+        while (tmpElem) {
+            posX += tmpElem->offsetLeft();
+            posY += tmpElem->offsetTop();
+            tmpElem = tmpElem->offsetParent();
+        }
+        */
+
+        String x(QString::number(text->minXPos() + posX));
+        if (!ctx.contains("x") || ctx.get("x") != x) {
+            ctx.set("x", x);
+            m_vdom += " x=";
+            m_vdom += QString(x).toUtf8();
+        }
+
+        String y(QString::number(text->yPos() + posY));
+        if (!ctx.contains("y") || ctx.get("y") != y) {
+            ctx.set("y", y);
+            m_vdom += " y=";
+            m_vdom += QString(y).toUtf8();
+        }
+
+        String w(QString::number(text->width()));
+        if (!ctx.contains("w") || ctx.get("w") != w) {
+            ctx.set("w", w);
+            m_vdom += " w=";
+            m_vdom += QString(w).toUtf8();
+        }
+
+        String h(QString::number(text->height()));
+        if (!ctx.contains("h") || ctx.get("h") != h) {
+            ctx.set("h", h);
+            m_vdom += " h=";
+            m_vdom += QString(h).toUtf8();
+        }
+
+        m_vdom += " {\n";
+        //if (!text->isBR()) {
+        InlineTextBox* firstBox = text->firstTextBox();
+        if (firstBox != text->lastTextBox()) {
+            for (InlineTextBox* box = firstBox; box;
+                    box = box->nextTextBox()) {
+                AttrHash clonedCtx = ctx;
+                dumpVTextRun(node, text, box, posX, posY, clonedCtx);
+            }
+        }
+        //}
+        m_vdom += "}\n";
+    } else {
+        dumpStrAsJson(node->nodeValue());
+        m_vdom += " x=0 y=0 w=0 h=0 {\n}\n";
+    }
+}
+
+void QWebVDomPrivate::dumpVTextRun(Node* node, RenderText* text, InlineTextBox* box, int posX, int posY, AttrHash& ctx) {
+    //dumpStrAsJson(text->text()->substring(box->start(), box->len()));
+    m_vdom += "\"\" pos=";
+    m_vdom += QByteArray::number(box->start());
+    m_vdom += " len=";
+    m_vdom += QByteArray::number(box->len());
+
+    //String x(QByteArray::number(box->x()));
+    int x = box->m_x + posX;
+    int y = box->m_y + posY;
+    //if (text->containingBlock()->isTableCell()) {
+        //qDebug() << "Adjusting y..." << endl;
+        //RenderTableCell* cell = static_cast<RenderTableCell*>(node->renderer()->containingBlock());
+        //y -= cell->intrinsicPaddingTop();
+        //x -= cell->borderLeft();
+    //}
+
+    String xx(QString::number(x));
+    if (!ctx.contains("x") || ctx.get("x") != xx) {
+        ctx.set("x", xx);
+        m_vdom += " x=";
+        m_vdom += QString(xx).toUtf8();
+    }
+
+    String yy(QString::number(y));
+    //String yy(QByteArray::number(y));
+    if (!ctx.contains("y") || ctx.get("y") != yy) {
+        ctx.set("y", yy);
+        m_vdom += " y=";
+        m_vdom += QString(yy).toUtf8();
+    }
+
+    String w(QString::number(box->width()));
+    if (!ctx.contains("w") || ctx.get("w") != w) {
+        ctx.set("w", w);
+        m_vdom += " w=";
+        m_vdom += QString(w).toUtf8();
+    }
+
+    String h(QString::number(box->height()));
+    if (!ctx.contains("h") || ctx.get("h") != h) {
+        ctx.set("h", h);
+        m_vdom += " h=";
+        m_vdom += QString(h).toUtf8();
+    }
+
+    //qDebug() << "text run at (" << box->x() << "," << y << ") width " << box->width() << " height " << box->height() << " start " << box->start() << "len " << box->len() << " " << String(text->text()).substring(box->start(), box->len());
+    m_vdom += "\n";
+}
+
+QWebVDom::QWebVDom(QWebFrame* qframe)
+    :d(new QWebVDomPrivate) {
+    d->init(this, qframe);
+}
+
+QWebVDom::~QWebVDom() {
+    delete d;
+}
+
+void QWebVDom::setFrame(QWebFrame* qframe) {
+    d->setFrame(qframe);
+}
+
+const QByteArray& QWebVDom::dump() {
+    return d->dumpVDom();
+}
+
+QString QWebVDom::dumpStrAsJson(const QString& str) {
+    d->m_vdom.clear();
+    d->dumpStrAsJson(str);
+    return QString::fromUtf8(d->m_vdom);
+}
+
+/*
+void QWebVDom::setEnabledParseJavascript(bool enableParseJavascript) {
+
+    if (enableParseJavascript)
+        HTMLParser::EnabledParseJavascript = 1;
+    else
+        HTMLParser::EnabledParseJavascript = 0;
+}
+*/
+
diff --git a/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom.h b/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom.h
new file mode 100644
index 0000000..dbb39ee
--- /dev/null
+++ b/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom.h
@@ -0,0 +1,42 @@
+/*
+ *
+ *
+ */
+
+#ifndef QWEBVDOM_H
+#define QWEBVDOM_H
+
+#include <QtCore/qobject.h>
+#include <QtCore/qurl.h>
+#include <QtCore/qvariant.h>
+#include <QtGui/qicon.h>
+#include <QtScript/qscriptengine.h>
+#if QT_VERSION >= 0x040400
+#include <QtNetwork/qnetworkaccessmanager.h>
+#endif
+
+#include "qwebkitglobal.h"
+
+class QWebFrame;
+class QWebVDomPrivate;
+
+class QWEBKIT_EXPORT QWebVDom : public QObject
+{
+    //Q_OBJECT
+public:
+    QWebVDom(QWebFrame* qframe);
+    ~QWebVDom();
+
+    void setFrame(QWebFrame* qframe);
+    const QByteArray& dump();
+    const QByteArray& dumpVDom();
+    QString dumpStrAsJson(const QString& str);
+
+    static void setEnabledParseJavascript(bool enableParseJavascript);
+
+private:
+    friend class QWebVDomPrivate;
+    QWebVDomPrivate* d;
+};
+
+#endif // QWEBVDOM_H
diff --git a/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom_p.h b/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom_p.h
new file mode 100644
index 0000000..5702853
--- /dev/null
+++ b/qt-4.5.2-webkit/WebKit/qt/Api/qwebvdom_p.h
@@ -0,0 +1,55 @@
+/*
+ *
+ *
+ */
+
+#ifndef QWEBVDOM_P_H
+#define QWEBVDOM_P_H
+
+#include "qwebvdom.h"
+#include "qwebframe.h"
+#include "qwebframe_p.h"
+
+#include "Frame.h"
+#include "Element.h"
+#include "Document.h"
+#include "DOMWindow.h"
+#include "Location.h"
+#include "wtf/HashMap.h"
+#include "HTMLElement.h"
+#include "HTMLDocument.h"
+#include <wtf/RefCountedLeakCounter.h>
+#include "InlineTextBox.h"
+
+using namespace WebCore;
+
+typedef HashMap<String, String> AttrHash;
+
+class QWebVDomPrivate
+{
+public:
+    QWebVDomPrivate();
+    ~QWebVDomPrivate();
+
+    void init(QWebVDom* qvdom, QWebFrame* qframe);
+    const QByteArray& dumpVDom();
+    void setFrame(QWebFrame* qframe);
+
+    void dumpVWindow(DOMWindow* win);
+    void dumpVDocument(HTMLDocument* doc);
+    void dumpVElement(HTMLElement* elem, DOMWindow* defaultView,  AttrHash &ctx);
+    void dumpVAttrs(HTMLElement* elem, PassRefPtr<CSSStyleDeclaration> coputedStyle, AttrHash &ctx);
+    void dumpVChildren(HTMLElement* elem, DOMWindow* defaultView, AttrHash &ctx);
+    void dumpVTextNode(Node* node, AttrHash& ctx);
+    void dumpVTextRun(Node* node, RenderText* text, InlineTextBox* box, int posX, int posY, AttrHash& ctx);
+
+    void dumpStrAsJson(const char* str);
+    void dumpStrAsJson(const QString& str);
+    void dumpStrAsJson(const String& str);
+
+    QWebVDom* q;
+    QWebFrame* m_qframe;
+    QByteArray m_vdom;
+};
+
+#endif
diff --git a/qt-4.5.2-webkit/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp b/qt-4.5.2-webkit/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp
index a2b33c0..09875fc 100644
--- a/qt-4.5.2-webkit/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp
+++ b/qt-4.5.2-webkit/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp
@@ -973,7 +973,8 @@ PassRefPtr<Frame> FrameLoaderClientQt::createFrame(const KURL& url, const String
     FrameLoadType loadType = m_frame->loader()->loadType();
     FrameLoadType childLoadType = FrameLoadTypeRedirectWithLockedHistory;
 
-    childFrame->loader()->loadURL(frameData.url, frameData.referrer, String(), childLoadType, 0, 0);
+    // commented out by agentzh:
+    //childFrame->loader()->loadURL(frameData.url, frameData.referrer, String(), childLoadType, 0, 0);
 
     // The frame's onload handler may have removed it from the document.
     if (!childFrame->tree()->parent())
diff --git a/qt-4.5.2-webkit/build.sh b/qt-4.5.2-webkit/build.sh
new file mode 100755
index 0000000..4f9418d
--- /dev/null
+++ b/qt-4.5.2-webkit/build.sh
@@ -0,0 +1,27 @@
+#!/bin/sh
+
+if [ -z $QT_SRC_DIR ]; then
+    QT_SRC_DIR=~/work/qt-all-opensource-src-4.5.2
+fi
+rsync -rcv --exclude='*~' --exclude='*.swp' --exclude='build.sh' \
+    --exclude='patch.sh' --exclude='install.sh' --exclude='*.patch' \
+    ./ $QT_SRC_DIR/src/3rdparty/webkit
+
+cd $QT_SRC_DIR
+
+#if [ -f Makefile ]; then
+    #make confclean
+#fi
+
+if [ -z $1 ]; then
+    #rm -rf .qmake.cache include
+    echo yes | \
+        ./configure -prefix /opt/vdom/qt -opensource -release \
+        -shared -no-phonon-backend -no-phonon -no-opengl \
+        -nomake examples -nomake demos -optimized-qmake -no-dbus \
+        -no-nis -no-cups -qt-zlib -qt-gif -qt-libpng -qt-libmng \
+        -qt-libjpeg -no-svg
+fi
+make -j2
+sudo make install_subtargets install_translations install_qmake install_mkspecs
+
diff --git a/qt-4.5.2-webkit/install.sh b/qt-4.5.2-webkit/install.sh
new file mode 100644
index 0000000..e1bf6d4
--- /dev/null
+++ b/qt-4.5.2-webkit/install.sh
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+if [ -z $QT_SRC_DIR ]; then
+    QT_SRC_DIR=~/work/qt-all-opensource-src-4.5.2
+fi
+
+cd $QT_SRC_DIR
+
+sudo make install_subtargets install_translations install_qmake install_mkspecs
+
diff --git a/qt-4.5.2-webkit/patch.sh b/qt-4.5.2-webkit/patch.sh
new file mode 100755
index 0000000..a804d04
--- /dev/null
+++ b/qt-4.5.2-webkit/patch.sh
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+git_rev=$(git svn find-rev r62193)
+echo $git_rev
+git diff -p $git_rev -- . > webkit.patch
+cp -i webkit.patch ~/git/rpm-4e-vdom/
+
